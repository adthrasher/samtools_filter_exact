#!/bin/bash
# samtools_filter_exact 0.0.1
# Generated by dx-app-wizard.
#
# Basic execution pattern: Your app will run on a single machine from
# beginning to end.
#
# Your job's input variables (if any) will be loaded as environment
# variables before this script runs.  Any array inputs will be loaded
# as bash arrays.
#
# Any code outside of main() (or any entry point you may add) is
# ALWAYS executed, followed by running the entry point itself.
#
# See https://wiki.dnanexus.com/Developer-Portal for tutorials on how
# to modify this file.

set -e -x

main() {

    echo "Value of bam_file: '$bam_file'"

    # The following line(s) use the dx command-line tool to download your file
    # inputs to the local file system using variable names for the filenames. To
    # recover the original filenames, you can use the output of "dx describe
    # "$variable" --name".

    dx download "$bam_file"

    # Fill in your application code here.
    #
    # To report any recognized errors in the correct format in
    # $HOME/job_error.json and exit this script, you can use the
    # dx-jobutil-report-error utility as follows:
    #
    #   dx-jobutil-report-error "My error message"
    #
    # Note however that this entire bash script is executed with -e
    # when running in the cloud, so any line which returns a nonzero
    # exit code will prematurely exit the script; if no error was
    # reported in the job_error.json file, then the failure reason
    # will be AppInternalError with a generic error message.

    # The following line(s) use the dx command-line tool to upload your file
    # outputs after you have created them on the local file system.  It assumes
    # that you have used the output field name for the filename for each output,
    # but you can change that behavior to suit your needs.  Run "dx upload -h"
    # to see more options to set metadata.
    samtools view -H $bam_file_name > tmp.sam
    cp tmp.sam tmp2.sam
    samtools view $bam_file_name | awk '($6 !~ /^[0-9]+M$/)' >> tmp.sam
    samtools view $bam_file_name | awk '($6 ~ /^[0-9]+M$/)' >> tmp2.sam
    prefix=$(basename $bam_file_name ".bam")
    samtools view -Sb tmp.sam > $prefix.inexact.bam
    samtools view -Sb tmp2.sam > $prefix.exact.bam


    exact_bam=$(dx upload $prefix.inexact.bam --brief)
    inexact_bam=$(dx upload $prefix.exact.bam --brief)

    # The following line(s) use the utility dx-jobutil-add-output to format and
    # add output variables to your job's output as appropriate for the output
    # class.  Run "dx-jobutil-add-output -h" for more information on what it
    # does.

    dx-jobutil-add-output inexact_bam "$inexact_bam" --class=file
    dx-jobutil-add-output exact_bam "$exact_bam" --class=file
}
